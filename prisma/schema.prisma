generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String      @unique
    password  String
    money     Int         @default(0)
    role      Role        @default(USER)
    status    Status      @default(ACTIVE)
    transMomo TransMomo[]
    transTsr  TransTsr[]
    transUser TransUser[]
    order     Order[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model Product {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @db.ObjectId
    name       String
    price      Int
    cpu        Int
    ram        Int
    os         String
    bandwidth  String
    status     Status   @default(ACTIVE)
    slug       String   @unique
    order      Order[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Category {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    slug      String    @unique
    products  Product[]
    status    Status    @default(ACTIVE)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Order {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    user      User          @relation(fields: [userId], references: [id])
    userId    String        @db.ObjectId
    product   Product       @relation(fields: [productId], references: [id])
    productId String        @db.ObjectId
    seller    String?
    note      String?
    infor     String?
    status    Int           @default(1)
    account   AccountOrder?
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

model AccountOrder {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    order     Order    @relation(fields: [orderId], references: [id])
    orderId   String   @unique @db.ObjectId
    seller    String?
    ip        String?
    username  String?
    password  String?
    note      String?
    infor     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TransMomo {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @db.ObjectId
    tranId      String
    money       Int
    status      String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt()
}

model TransTsr {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @db.ObjectId
    tranId      String
    money       Int
    status      String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt()
}

model TransUser {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @db.ObjectId
    oldMoney    Int
    money       Int
    newMoney    Int
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt()
}

enum Status {
    ACTIVE
    INACTIVE
}

enum Role {
    USER
    CTV
    ADMIN
}
